package com.unir.springboot.app.msauth.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;


import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
public class WebSecurityConfig {

	
	@Autowired
	UserDetailsService userDetailsService;


	@Bean
	SecurityFilterChain filterChain(HttpSecurity http, AuthenticationManager authManager) throws Exception {

		http
			.csrf((csrf) -> csrf.disable())
			.authorizeHttpRequests((authorizeRequests) ->
				authorizeRequests
					.anyRequest().authenticated()
			)
			.sessionManagement(sees -> sees.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
			.httpBasic(withDefaults());
		return http.build();
		
//		http.csrf(csrf -> csrf.disable());
//		http.authorizeHttpRequests(ahr -> ahr.anyRequest().authenticated());
//		http.sessionManagement(sees -> sees.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
//		http.addFilter(jwtAuthenticationFilter);
//		http.addFilterBefore(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class);
//        http.httpBasic(withDefaults());
//		return http.build();

//		return http.csrf().disable()
//				.authorizeHttpRequests().anyRequest().authenticated().and().httpBasic().and()
//				.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
//				.addFilter(jwtAuthenticationFilter)
//				.addFilterBefore(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class).build();

	}

	@Bean
	UserDetailsService userDetailsService(){
		InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();
		manager.createUser(User.withUsername("admin")
			.password( passwordEncoder().encode("admin"))
			.roles()
			.build());
		return manager;
	}

	
	@SuppressWarnings("removal")
	@Bean
	AuthenticationManager authManager(HttpSecurity http) throws Exception {
		return http.getSharedObject(AuthenticationManagerBuilder.class)
				.userDetailsService(userDetailsService())
				.passwordEncoder(passwordEncoder())
				.and().
				build();
	}

	@Bean
	PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	public static void main(String[] args) {
		System.out.println("pass: " + new BCryptPasswordEncoder().encode("12345"));
	}

}
